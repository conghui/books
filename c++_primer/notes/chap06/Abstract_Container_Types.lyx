#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
%Fixme: is this really necessary?
\DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
\date{}
\end_preamble
\options UTF8
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package none
\inputencoding utf8-plain
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Abstract Container Types
\end_layout

\begin_layout Section*
How a vector Grows Itself
\end_layout

\begin_layout Standard
the larger and more complex the data type, the less efficient the vector
 becomes compared with a list.
\end_layout

\begin_layout Standard
For small data types, a vector performs considerably better than a list,
 whereas for large data objects, the reverse is true: a list performs considerab
ly better.
 This difference is due to the need to regrow and copy the elements of the
 vector.
 
\end_layout

\begin_layout Standard
The size of the data type, however, is not the only criterion affecting
 the performance of the container.
 The complexity of the data type also affects the performance of element
 insertion.
\end_layout

\begin_layout Section*
Defining a Sequence Container
\end_layout

\begin_layout Standard
There are three constraints as to the types of containers that we can define
 (in practice, they pertain only to user-defined class types).
\end_layout

\begin_layout Enumerate
The element type must support the equality operator.
 
\end_layout

\begin_layout Enumerate
The element type must support the less-than operator (all the relational
 operators discussed earlier are implemented using these two operators).
 
\end_layout

\begin_layout Enumerate
The element type must support a default value (again, for a class type,
 this is spoken of as a default constructor).
\end_layout

\begin_layout Standard
All the predefined data types, including pointers, meet these constraints,
 as do all the class types provided by the C++ standard library.
\end_layout

\begin_layout Subsection*
The Generic Algorithms
\end_layout

\begin_layout Standard
the idea is to factor the operations common to all container types into
 a collection of generic algorithms that can be applied to all the container
 types as well as to the built-in array type.
\end_layout

\begin_layout Section*
set and map
\end_layout

\begin_layout Standard
In general, a set is most useful when we simply want to know whether or
 not a value has been seen, and a map is most useful when we wish to store
 (and possibly modify) an associated value.
\end_layout

\end_body
\end_document
