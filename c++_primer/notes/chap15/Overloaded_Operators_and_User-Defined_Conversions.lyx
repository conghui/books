#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
%Fixme: is this really necessary?
\DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
\date{}
\end_preamble
\options UTF8
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package none
\inputencoding utf8-plain
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language={C++}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Overloaded Operators and User-Defined Conversions
\end_layout

\begin_layout Section*
Operator ->
\end_layout

\begin_layout Standard
The member access operator arrow is overloaded as a unary operator; that
 is, it takes no parameter.
 When it is used in an expression, it is selected solely on the type of
 the left operand.
 For example, given the statement
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

point->action();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
point is examined to determine its type.
 If point is a pointer of some class type, the statement uses the semantics
 of the built-in member access operator arrow.
 If point is an object or a reference of some class type, the class is examined
 for an overloaded member access operator arrow.
 If a member operator is not defined, the statement is in error since a
 class object or reference must ordinarily use the dot member access operator
 to refer to class members.
 If an overloaded member access operator arrow is defined, it is bound to
 point and invoked.
\end_layout

\begin_layout Standard
The return type of an overloaded member access operator arrow must either
 be a pointer to a class type or an object of a class for which the member
 access operator arrow is defined.
 If the return type is a pointer to class type, the semantics for the built-in
 member access operator arrow are then applied to the return value.
 If the return value is another class object or reference, the process is
 applied recursively until either a pointer type is returned or the statement
 is in error.
 
\end_layout

\begin_layout Section*
Operators ++ and --
\end_layout

\begin_layout Standard
To distinguish the declaration of the postfix operators from the declaration
 of the prefix operators, the declarations for the overloaded increment
 and decrement postfix operators have an extra parameter of type int.
 In the following example, pre- and postfix pairs of operators for the ScreenPtr
 class are declared.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class ScreenPtr {
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

   Screen& operator++();    // prefix operators
\end_layout

\begin_layout Plain Layout

   Screen& operator--();
\end_layout

\begin_layout Plain Layout

   Screen& operator++(int); // postfix operators
\end_layout

\begin_layout Plain Layout

   Screen& operator--(int);
\end_layout

\begin_layout Plain Layout

   // ...
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Conversion Functions
\end_layout

\begin_layout Standard
A conversion function takes the general form
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

operator type();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where type is replaced by a built-in type, a class type, or a typedef name.
 Conversion functions in which type represents either an array or a function
 type are not allowed.
 A conversion function must be a member function.
 Its declaration must not specify a return type nor can a parameter list
 be specified.
 
\end_layout

\begin_layout Standard
Only standard conversion sequences are allowed following the user-defined
 conversion.
\end_layout

\begin_layout Section*
A Constructor as a Conversion Function
\end_layout

\begin_layout Standard
The collection of constructors for a class taking a single parameter, defines
 a set of implicit conversions from values of the constructors' parameter
 types to values of type 
\end_layout

\end_body
\end_document
