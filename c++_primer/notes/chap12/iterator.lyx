#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
%Fixme: is this really necessary?
\DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
\end_preamble
\options UTF8
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package none
\inputencoding utf8-plain
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format html
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "language={C++}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Iterators provide a generalization of a pointer.
 The minimally support 
\end_layout

\begin_layout Itemize
an increment operator to access a next element;
\end_layout

\begin_layout Itemize
a dereference operator to access the actual element;
\end_layout

\begin_layout Itemize
the equality and inequality operators to determine whether two iterators
 are equal.
 
\end_layout

\begin_layout Standard
The difference of passing a pointer to function and a function object to
 the sort algorithm is that the function pointer cannot be inlined, it is
 less efficient.
 But the functor can be inlined, making it more efficient.
 
\end_layout

\begin_layout Standard
The benifits of a function object over a pointer to a function are twofold.
 
\end_layout

\begin_layout Enumerate
If the overloaded call operator is an inline function, the compiler is able
 to perform the inlining, providing a possibly significant efficiency gain.
\end_layout

\begin_layout Enumerate
The function object can hold an arbitrary amount of additional data, either
 cached results or data to help in the current operation.
\end_layout

\begin_layout Standard
Where do function objects come from? In general, there are three sources
 of the function objects:
\end_layout

\begin_layout Enumerate
A set of arithmetic, relational, and logical function objects is predefined
 by the standard library.
\end_layout

\begin_layout Enumerate
A set of predefined function adaptors allow us to specialize or extend the
 predefined function objects (or, for that matter, any function object)
\end_layout

\begin_layout Enumerate
We can define our own function objects, to be passed to the generic algorithms
 and possibly against which to apply the function adaptors.
 
\end_layout

\begin_layout Standard
Three kinds of insert iterator
\end_layout

\begin_layout Enumerate
back_insert_iterator<Container> back_inserter(Constainer &); 
\end_layout

\begin_layout Enumerate
front_inser_iterator<Container> front_inserter(Container &); 
\end_layout

\begin_layout Enumerate
insert_iterator<Container> inserter(Container &, Iterator); 
\end_layout

\begin_layout Standard
The default construction of istream_iterator indicates the end of istream.
 
\end_layout

\end_body
\end_document
