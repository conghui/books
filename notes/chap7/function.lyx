#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass ctex-article
\begin_preamble
%Fixme: is this really necessary?
\DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
\end_preamble
\options UTF8
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package none
\inputencoding utf8-plain
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
date{}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Chapter 7: Function
\end_layout

\begin_layout Subsection*
Reference && Pointer
\end_layout

\begin_layout Standard
reference must be initialized to an object, and once initialized, it can
 not be made to refer another object.
 A pointer can address of a sequenceof object or address no object at all.
\end_layout

\begin_layout Standard
Because a pointer can either address an object or address no object at all,
 a function cannot safely dereference a pointer before it firstly confirm
 that the pointer does address an object.
\end_layout

\begin_layout Standard
On the other hand, with a reference parameter, a function doesn't have to
 guard it refer to an object.
 A reference has to refer to an object, whether it is willing or not.
 
\end_layout

\begin_layout Standard
So, if the parameter will pointer to another object or it will pointer to
 no object at all, the parameter should be an pointer.
\end_layout

\begin_layout Standard
\begin_inset CommandInset line
LatexCommand rule
offset "0ex"
width "95page%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
One important use of reference parameters is to allow us to implement overloaded
 operators efficiently while keeping their use intuitive.
 For example, when we overload the operator+ in class Matrix, if we define
\end_layout

\begin_layout LyX-Code
Matrix operator+(Matrix *m1, Matrix *m32);
\end_layout

\begin_layout Standard
It is ok and gain high efficiency, but we have to use it by
\end_layout

\begin_layout LyX-Code
&m1 + &m2
\end_layout

\begin_layout Standard
But, when we want to add three matrix object, we have to
\end_layout

\begin_layout LyX-Code
&(&m1 + &m2) + &m3
\end_layout

\begin_layout Standard
No one would expect to write that.
\end_layout

\begin_layout Subsection*
default argument
\end_layout

\begin_layout Standard
The default arguments are provided in the function prototype, ont int the
 function definition.
\end_layout

\begin_layout Standard
Arguments to the call are resolved by position, and default arguments are
 used only to substitute the missing trailing arguments of a function call.
 
\end_layout

\begin_layout Standard
The following prototypes are valid:
\end_layout

\begin_layout LyX-Code
void f(int a, b, c = 0);
\end_layout

\begin_layout LyX-Code
void g(int a, b = 0, c = 0);
\end_layout

\begin_layout LyX-Code
void h(int a = 0, b = 0, c = 0);
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
But the following prototypes are invalid:
\end_layout

\begin_layout LyX-Code
void f(int a = 0, b, c); 
\end_layout

\begin_layout LyX-Code
void g(int a, b = 0, c);
\end_layout

\begin_layout LyX-Code
void h(int a = 0, b, c = 0);
\end_layout

\begin_layout Standard
However, if redeclaration appears, the following declarations are valid:
\end_layout

\begin_layout LyX-Code
void f(int, int, int = 0);  //ok
\end_layout

\begin_layout LyX-Code
void f(int, int = 0, int);  //ok
\end_layout

\begin_layout LyX-Code
void f(int = 0, int, int);  //ok
\end_layout

\begin_layout Standard
But the following are invalid:
\end_layout

\begin_layout LyX-Code
void f(int = 0, int, int);  //invalid at first.
\end_layout

\begin_layout LyX-Code
void f(int, int = 0, int);  //invalid
\end_layout

\begin_layout LyX-Code
void f(int, int, int = 0);  //ok, the the previous two is invalid.
\end_layout

\begin_layout Standard
What's more, the following are invalid either:
\end_layout

\begin_layout LyX-Code
void f(int, int, int = 0); //ok
\end_layout

\begin_layout LyX-Code
void f(int, int = 0, int = 0); //invalid, the third default value should
 be eliminated.
\end_layout

\begin_layout Standard
The default argument could be any expression, including function calls.
\end_layout

\end_body
\end_document
